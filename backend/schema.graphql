type Club {
  id: ID!
  name: String!
  tier: Int!
  seats: Int!
  leaderContribution: Float!
  memberFee: Float!
  createdAt: AWSDateTime!
}

type Member {
  id: ID!
  clubId: ID!
  name: String!
  email: String!
  joinedAt: AWSDateTime!
}

type Query {
  getClub(id: ID!): Club
  listClubs: [Club!]!
}

type Mutation {
  createClub(name: String!, tier: Int!, seats: Int!, leaderContribution: Float!): Club
  updateClub(id: ID!, tier: Int, seats: Int, leaderContribution: Float): Club


# Event type for study club meetings

type Event {
  id: ID!
  clubId: ID!
  name: String!
  startDate: AWSDateTime!
  endDate: AWSDateTime!
  location: String
  description: String
  moduleId: ID
  createdAt: AWSDateTime!
}

extend type Query {
  listEvents(clubId: ID!): [Event!]!
}

extend type Mutation {
  createEvent(clubId: ID!, name: String!, startDate: AWSDateTime!, endDate: AWSDateTime!, location: String, description: String, moduleId: ID): Event
  updateEvent(id: ID!, name: String, startDate: AWSDateTime, endDate: AWSDateTime, location: String, description: String, moduleId: ID): Event
  deleteEvent(id: ID!): Boolean
}
}
